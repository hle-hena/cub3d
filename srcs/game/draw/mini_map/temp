t_point	*get_corner(t_data *data, t_point player, t_trig vals, t_point start)
{
	static t_point	corners[4];
	t_point			tmp;
	int				*dx;
	int				*dy;
	int				i;
	int				inside;

	inside = 0;
	dx = (int [4]){0, data->map->mini_map_scale, data->map->mini_map_scale, 0};
	dy = (int [4]){0, 0, data->map->mini_map_scale, data->map->mini_map_scale};
	i = -1;
	while (++i < 4)
	{
		tmp.x = start.x + dx[i];
		tmp.y = start.y + dy[i];
		rotate_point(&corners[i], tmp, player, vals);
		corners[i].x += data->map->mini_map.x;
		corners[i].y += data->map->mini_map.y;
		if (point_is_in_mini_map(data, corners[i]))
			inside = 1;
	}
	if (inside)
		return (corners);
	return (NULL);
}

// Utility function to check if a point is inside the polygon using ray-casting
int point_in_polygon(t_point p, t_point *corners, int num_corners) {
    int i, j, c = 0;
    for (i = 0, j = num_corners - 1; i < num_corners; j = i++) {
        if (((corners[i].y > p.y) != (corners[j].y > p.y)) &&
            (p.x < (corners[j].x - corners[i].x) * (p.y - corners[i].y) / (corners[j].y - corners[i].y) + corners[i].x)) {
            c = !c;
        }
    }
    return c;
}

// Utility function to sort x-coordinates for the scanline
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Scanline fill algorithm
void scanline_fill(t_data *data, t_point *corners, int num_corners, int color) {
    int min_x = corners[0].x, max_x = corners[0].x;
    int min_y = corners[0].y, max_y = corners[0].y;
    t_point current_point;

    // Calculate the bounding box of the polygon
    for (int i = 1; i < num_corners; i++) {
        if (corners[i].x < min_x) min_x = corners[i].x;
        if (corners[i].x > max_x) max_x = corners[i].x;
        if (corners[i].y < min_y) min_y = corners[i].y;
        if (corners[i].y > max_y) max_y = corners[i].y;
    }

    // Iterate through each horizontal scanline from min_y to max_y
    for (int y = min_y; y <= max_y; ++y) {
        // Find intersections of the scanline with the polygon edges
        int intersections[10], intersection_count = 0;
        for (int i = 0; i < num_corners; i++) {
            int j = (i + 1) % num_corners;
            if ((corners[i].y <= y && corners[j].y > y) || (corners[i].y > y && corners[j].y <= y)) {
                int x = corners[i].x + (y - corners[i].y) * (corners[j].x - corners[i].x) / (corners[j].y - corners[i].y);
                intersections[intersection_count++] = x;
            }
        }

        // Sort the intersection points to fill between left and right intersections
        for (int i = 0; i < intersection_count - 1; i++) {
            for (int j = i + 1; j < intersection_count; j++) {
                if (intersections[i] > intersections[j]) {
                    swap(&intersections[i], &intersections[j]);
                }
            }
        }

        // Fill the area between pairs of intersections
        for (int i = 0; i < intersection_count; i += 2) {
            for (int x = intersections[i]; x <= intersections[i + 1]; ++x) {
                current_point.x = x;
                current_point.y = y;
                // Ensure the point is within the valid bounds
                if (point_is_in_mini_map(data, current_point)) {
                    ft_put_pixel(data, current_point, color); // Fill pixel
                }
            }
        }
    }
}

void	draw_tile(t_data *data, t_point start, t_trig vals, int color)
{
	t_point	*corners;
	t_point	player;

	player.x = data->map->player.x * data->map->mini_map_scale;
	player.y = data->map->player.y * data->map->mini_map_scale;
	corners = get_corner(data, player, vals, start);
	if (!corners)
		return ;
	draw_line(data, corners[0], corners[1], color);
	draw_line(data, corners[1], corners[2], color);
	draw_line(data, corners[2], corners[3], color);
	draw_line(data, corners[3], corners[0], color);
	scanline_fill(data, corners, 4, color);
}
